openapi: 3.0.3
info:
  title: Pinecone API
  version: version not set
  contact:
    name: Pinecone.io Ops
    url: https://pinecone.io
    email: support@pinecone.io
servers:
  - url: 'https://index_name-project_id.svc.environment.pinecone.io'
    variables:
      index_name-project_id.svc.environment.pinecone.io:
        default: index_name-project_id.svc.environment.pinecone.io
        description: URL for the target Pinecone index. See app.pinecone.io > Indexes > Index Name.
externalDocs:
  description: More Pinecone.io API docs
  url: https://www.pinecone.io/docs
security:
  - ApiKeyAuth: []
tags:
  - name: Vector Operations
  - name: Index Operations
paths:
  /describe_index_stats:
    post:
      summary: DescribeIndexStats
      description: The `DescribeIndexStats` operation returns statistics about the index's contents, including the vector count per <a href='https://docs.pinecone.io/docs/namespaces'>namespace</a> and the number of dimensions.
      operationId: describe_index_stats
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeIndexStatsResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeIndexStatsRequest'
        required: true
      tags:
        - Vector Operations
      x-readme:
        code-samples:
          - language: python
            code: |-
              import pinecone 

              pinecone.init(api_key='YOUR_API_KEY', environment='us-east1-gcp') 
              index = pinecone.Index('example-index') 

              index_stats_response = index.describe_index_stats()
            install: pip install pinecone-client
          - language: node
            code: |-
              import { Pinecone } from '@pinecone-database/pinecone';

              const pinecone = new Pinecone({
                  apiKey: 'your-api-key', 
                  environment: 'your-environment',
              });
              const index = pinecone.index('example-index');
              const stats = await index.describeIndexStats();
            install: npm install @pinecone-database/pinecone
  /query:
    post:
      summary: Query
      description: |-
        The `Query` operation searches a <a href='https://docs.pinecone.io/docs/namespaces'>namespace</a>, using a query vector.
        It retrieves the ids of the most similar items in a namespace, along with their similarity scores.
      operationId: query
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
        required: true
      tags:
        - Vector Operations
      x-readme:
        code-samples:
          - language: python
            code: |-
              import pinecone 

              pinecone.init(api_key='YOUR_API_KEY', environment='us-east1-gcp') 
              index = pinecone.Index('example-index') 

              query_response = index.query(
                  namespace='example-namespace',
                  top_k=10,
                  include_values=True,
                  include_metadata=True,
                  vector=[0.1, 0.2, 0.3, 0.4],
                  sparseVector={
                      'indices': [10, 45, 16],
                      'values':  [0.5, 0.5, 0.2]
                  },
                  filter={
                      'genre': {'$in': ['comedy', 'documentary', 'drama']}
                  }
              )
            install: pip install pinecone-client
          - language: node
            code: |-
              import { Pinecone } from '@pinecone-database/pinecone';

              const pinecone = new Pinecone({
                  apiKey: 'your-api-key', 
                  environment: 'your-environment',
              });
              const index = pinecone.index('example-index');

              // query in default namespace
              const queryResponse = await index.query({
                topK: 10,
                vector: [0.1,0.2,0.3]
              });

              // query in a namespace
              const queryResponse2 = await index.namespace('example-namespace').query({
                topK: 10,
                vector: [0.1,0.2,0.3]
              });
            install: npm install @pinecone-database/pinecone
  /vectors/delete:
    post:
      summary: Delete
      description: |-
        The `Delete` operation deletes vectors, by id, from a single <a href='https://docs.pinecone.io/docs/namespaces'>namespace</a>.
        You can delete items by their id, from a single namespace.
      operationId: delete
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRequest'
        required: true
      tags:
        - Vector Operations
      x-readme:
        code-samples:
          - language: python
            code: |-
              import pinecone 

              pinecone.init(api_key='YOUR_API_KEY', environment='us-east1-gcp') 
              index = pinecone.Index('example-index') 

              delete_response = index.delete(ids=['vec1', 'vec2'], namespace='example-namespace')
            install: pip install pinecone-client
          - language: node
            code: |-
              import { Pinecone } from '@pinecone-database/pinecone';

              const pinecone = new Pinecone({
                  apiKey: 'your-api-key', 
                  environment: 'your-environment',
              });
              const index = pinecone.index('example-index');

              // delete one record by id in default namespace
              await index.deleteOne('1')
              // delete several records by id in default namespace
              await index.deleteMany([ '2', '3', '4' ]);
              // delete all records in the default namespace
              await index.deleteAll();

              // Perform those same operations in a non-default namespace (for paid indexes only)
              const ns = index.namespace('example-namespace');
              await ns.deleteOne('1');
              await ns.deleteMany([ '2', '3', '4' ]);
              await ns.deleteAll();
            install: npm install @pinecone-database/pinecone
  /vectors/fetch:
    get:
      summary: Fetch
      description: |-
        The `Fetch` operation looks up and returns vectors, by ID, from a single <a href='https://docs.pinecone.io/docs/namespaces'>namespace</a>.
        The returned vectors include the vector data and/or metadata.
      operationId: fetch
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: ids
          description: The vector IDs to fetch. Does not accept values containing spaces. Limited to 1000 IDs.
          in: query
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: namespace
          in: query
          required: false
          schema:
            type: string
      tags:
        - Vector Operations
      x-readme:
        code-samples:
          - language: python
            code: |-
              import pinecone 

              pinecone.init(api_key='YOUR_API_KEY', environment='us-east1-gcp') 
              index = pinecone.Index('example-index') 

              fetch_response = index.fetch(ids=['vec1', 'vec2'], namespace='example-namespace')
            install: pip install pinecone-client
          - language: node
            code: |-
              import { Pinecone } from '@pinecone-database/pinecone';

              const pinecone = new Pinecone({
                  apiKey: 'your-api-key', 
                  environment: 'your-environment',
              });
              const index = pinecone.index('example-index');

              // Fetch a list of ids from the default namespace
              const fetchResult = await index.fetch(['1', '2', '3'])

              // Fetch a list of ids from a non-default namespace (for paid indexes only)
              const ns = index.namespace('example-namespace');
              const fetchResult2 = await ns.fetch(['1', '2', '3']);
            install: npm install @pinecone-database/pinecone
  /vectors/update:
    post:
      summary: Update
      description: |-
        The `Update` operation updates vector in a <a href='https://docs.pinecone.io/docs/namespaces'>namespace</a>.
        If a value is included, it will overwrite the previous value.
        If a set_metadata is included, the values of the fields specified in it will be added or overwrite the previous value.
      operationId: update
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRequest'
        required: true
      tags:
        - Vector Operations
      x-readme:
        code-samples:
          - language: python
            code: |-
              import pinecone 

              pinecone.init(api_key='YOUR_API_KEY', environment='us-east1-gcp') 
              index = pinecone.Index('example-index') 

              update_response = index.update(
                  id='vec1',
                  values=[0.1, 0.2, 0.3, 0.4],
                  set_metadata={'genre': 'drama'},
                  namespace='example-namespace'
              )
            install: pip install pinecone-client
          - language: node
            code: |-
              import { Pinecone } from '@pinecone-database/pinecone';

              const pinecone = new Pinecone({
                  apiKey: 'your-api-key', 
                  environment: 'your-environment',
              });
              const index = pinecone.index('example-index');

              // Update a record in the default namespace
              await index.update({
                id: '1',
                sparseValues: {
                  indices: [15, 30, 11],
                  values: [0.1, 0.2, 0.3],
                },
                metadata: {}
              });

              // Update a record in a non-default namespace (for paid indexes only)
              const ns = index.namespace('example-namespace');
              await ns.update({
                id: '1',
                sparseValues: {
                  indices: [15, 30, 11],
                  values: [0.1, 0.2, 0.3],
                },
                metadata: {}
              });
            install: npm install @pinecone-database/pinecone
  /vectors/upsert:
    post:
      summary: Upsert
      description: |-
        The `Upsert` operation writes vectors into a <a href='https://docs.pinecone.io/docs/namespaces'>namespace</a>.
        If a new value is upserted for an existing vector id, it will overwrite the previous value.
      operationId: upsert
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertRequest'
        required: true
      tags:
        - Vector Operations
      x-readme:
        code-samples:
          - language: python
            code: |-
              import pinecone 

              pinecone.init(api_key='YOUR_API_KEY', environment='us-east1-gcp') 
              index = pinecone.Index('example-index') 

              upsert_response = index.upsert(
                  vectors=[
                      {
                      'id':'vec1', 
                      'values':[0.1, 0.2, 0.3, 0.4], 
                      'metadata':{'genre': 'drama'},
                         'sparse_values':
                         {'indices': [10, 45, 16],
                         'values':  [0.5, 0.5, 0.2]}},
                      {'id':'vec2', 
                      'values':[0.2, 0.3, 0.4, 0.5], 
                      'metadata':{'genre': 'action'},
                         'sparse_values':
                         {'indices': [15, 40, 11],
                         'values':  [0.4, 0.5, 0.2]}}
                  ],
                  namespace='example-namespace'
              )
            install: pip install pinecone-client
          - language: node
            code: |-
              import { Pinecone } from '@pinecone-database/pinecone';

              const pinecone = new Pinecone({
                  apiKey: 'your-api-key', 
                  environment: 'your-environment',
              });
              const index = pinecone.index('example-index');

              // In a more realistic scenario, these vector values are
              // the output of a model. Values must match the dimension
              // of the index.
              const records = [
                { id: '1', values: [0.1, 0.2, 0.3] },
                { id: '2', values: [0.4, 0.5, 0.6] }
              ]

              // Upsert a record in the default namespace
              await index.upsert(records);

              // Upsert a record in a non-default namespace (for paid indexes only)
              const ns = index.namespace('example-namespace');
              await ns.upsert(records);
            install: npm install @pinecone-database/pinecone
components:
  schemas:
    DeleteRequest:
      type: object
      properties:
        ids:
          type: array
          example:
            - id-0
            - id-1
          items:
            type: string
          description: Vectors to delete.
          maxLength: 1000
          minLength: 1
        deleteAll:
          type: boolean
          example: false
          default: 'false'
          description: This indicates that all vectors in the <a href='https://docs.pinecone.io/docs/namespaces'>namespace</a> should be deleted. Not supported by projects on the gcp-starter environment.
        namespace:
          type: string
          example: example-namespace
          description: The <a href='https://docs.pinecone.io/docs/namespaces'>namespace</a> to delete vectors from, if applicable.
        filter:
          type: object
          description: |-
            If specified, the metadata filter here will be used to select the vectors to delete. This is mutually exclusive
            with specifying IDs to delete in the ids param or using delete_all=True.
            See https://www.pinecone.io/docs/metadata-filtering/. Not supported by projects on the gcp-starter environment.
      description: The request for the `Delete` operation.
    DeleteResponse:
      type: object
      description: The response for the `Delete` operation.
    DescribeIndexStatsRequest:
      type: object
      properties:
        filter:
          type: object
          description: |-
            If this parameter is present, the operation only returns statistics
            for vectors that satisfy the filter.
            See https://www.pinecone.io/docs/metadata-filtering/.
      description: The request for the `DescribeIndexStats` operation.
    DescribeIndexStatsResponse:
      type: object
      example:
        namespaces:
          '':
            vectorCount: 50000
          example-namespace-2:
            vectorCount: 30000
        dimension: 1024
        index_fullness: 0.4
      properties:
        namespaces:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/NamespaceSummary'
          description: |-
            A mapping for each <a href='https://docs.pinecone.io/docs/namespaces'>namespace</a> in the index from the namespace name to a
            summary of its contents. If a metadata filter expression is present, the
            summary will reflect only vectors matching that expression.
        dimension:
          type: integer
          format: int64
          example: 1024
          description: The dimension of the indexed vectors.
        indexFullness:
          type: number
          format: float
          example: 0.4
          description: The fullness of the index, regardless of whether a metadata filter expression was passed. The granularity of this metric is 10%.
        totalVectorCount:
          type: integer
          format: int64
          example: 80000
          description: The total number of vectors in the index, regardless of whether a metadata filter expression was passed
      description: The response for the `DescribeIndexStats` operation.
    FetchResponse:
      type: object
      properties:
        vectors:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Vector'
          description: The fetched vectors, in the form of a map between the fetched ids and the fetched vectors
        namespace:
          type: string
          example: example-namespace
          description: The <a href='https://docs.pinecone.io/docs/namespaces'>namespace</a> of the vectors.
      description: The response for the `Fetch` operation.
    NamespaceSummary:
      type: object
      properties:
        vectorCount:
          type: integer
          format: int64
          example: 50000
          description: |-
            The number of vectors stored in this <a href='https://docs.pinecone.io/docs/namespaces'>namespace</a>. Note that updates to this field may lag behind updates to the
            underlying index and corresponding query results, etc.
      description: A summary of the contents of a <a href='https://docs.pinecone.io/docs/namespaces'>namespace</a>.
    QueryRequest:
      type: object
      properties:
        namespace:
          type: string
          example: example-namespace
          description: The <a href='https://docs.pinecone.io/docs/namespaces'>namespace</a> to query.
        topK:
          type: integer
          format: int64
          example: 10
          description: The number of results to return for each query.
          maximum: 10000
          minimum: 1
          required:
            - top_k
        filter:
          type: object
          example:
            genre:
              $in:
                - comedy
                - documentary
                - drama
            year:
              $eq: 2019
          description: The filter to apply. You can use vector metadata to limit your search. See https://www.pinecone.io/docs/metadata-filtering/.
        includeValues:
          type: boolean
          example: true
          default: 'false'
          description: Indicates whether vector values are included in the response.
        includeMetadata:
          type: boolean
          example: true
          default: 'false'
          description: Indicates whether metadata is included in the response as well as the ids.
        queries:
          type: array
          items:
            $ref: '#/components/schemas/QueryVector'
          description: DEPRECATED. The query vectors. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
          maxLength: 10
          minLength: 1
          deprecated: true
        vector:
          type: array
          example:
            - 0.1
            - 0.2
            - 0.3
            - 0.4
            - 0.5
            - 0.6
            - 0.7
            - 0.8
          items:
            type: number
            format: float
          description: The query vector. This should be the same length as the dimension of the index being queried. Each `query()` request can contain only one of the parameters `id` or `vector`.
          maxLength: 20000
          minLength: 1
        sparseVector:
          $ref: '#/components/schemas/SparseValues'
        id:
          type: string
          example: example-vector-1
          description: The unique ID of the vector to be used as a query vector. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
          maxLength: 512
      description: The request for the `Query` operation.
      required:
        - topK
    QueryResponse:
      type: object
      properties:
        matches:
          type: array
          items:
            $ref: '#/components/schemas/ScoredVector'
          description: The matches for the vectors.
        namespace:
          type: string
          description: The <a href='https://docs.pinecone.io/docs/namespaces'>namespace</a> for the vectors.
      description: The response for the `Query` operation. These are the matches found for a particular query vector. The matches are ordered from most similar to least similar.
    QueryVector:
      type: object
      properties:
        values:
          type: array
          example:
            - 0.1
            - 0.2
            - 0.3
            - 0.4
            - 0.5
            - 0.6
            - 0.7
            - 0.8
          items:
            type: number
            format: float
          description: The query vector values. This should be the same length as the dimension of the index being queried.
          maxLength: 20000
          minLength: 1
          required:
            - values
        sparseValues:
          $ref: '#/components/schemas/SparseValues'
        topK:
          type: integer
          format: int64
          example: 10
          description: An override for the number of results to return for this query vector.
          maximum: 10000
          minimum: 1
        namespace:
          type: string
          example: example-namespace
          description: The <a href='https://docs.pinecone.io/docs/namespaces'>namespace</a> to search.
        filter:
          type: object
          example:
            genre:
              $in:
                - comedy
                - documentary
                - drama
            year:
              $eq: 2019
          description: An override for the metadata filter to apply. This replaces the request-level filter.
      description: A single query vector within a `QueryRequest`.
      required:
        - values
      deprecated: true
    ScoredVector:
      type: object
      properties:
        id:
          type: string
          example: example-vector-1
          description: This is the vector's unique id.
          maxLength: 512
          minLength: 1
          required:
            - id
        score:
          type: number
          format: float
          example: 0.08
          description: This is a measure of similarity between this vector and the query vector.  The higher the score, the more they are similar.
        values:
          type: array
          example:
            - 0.1
            - 0.2
            - 0.3
            - 0.4
            - 0.5
            - 0.6
            - 0.7
            - 0.8
          items:
            type: number
            format: float
          description: This is the vector data, if it is requested.
        sparseValues:
          $ref: '#/components/schemas/SparseValues'
        metadata:
          type: object
          example:
            genre: documentary
            year: 2019
          description: This is the metadata, if it is requested.
      required:
        - id
    SingleQueryResults:
      type: object
      properties:
        matches:
          type: array
          items:
            $ref: '#/components/schemas/ScoredVector'
          description: The matches for the vectors.
        namespace:
          type: string
          example: example-namespace
          description: The <a href='https://docs.pinecone.io/docs/namespaces'>namespace</a> for the vectors.
      title: The query results for a single `QueryVector`
    SparseValues:
      type: object
      properties:
        indices:
          type: array
          example:
            - 1
            - 312
            - 822
            - 14
            - 980
          items:
            type: integer
            format: int64
          description: The indices of the sparse data.
          maxLength: 1000
          minLength: 1
          required:
            - indices
        values:
          type: array
          example:
            - 0.1
            - 0.2
            - 0.3
            - 0.4
            - 0.5
          items:
            type: number
            format: float
          description: The corresponding values of the sparse data, which must be the same length as the indices.
          maxLength: 1000
          minLength: 1
          required:
            - values
      description: Vector sparse data. Represented as a list of indices and a list of corresponded values, which must be the same length.
      required:
        - indices
        - values
    UpdateRequest:
      type: object
      properties:
        id:
          type: string
          example: example-vector-1
          description: Vector's unique id.
          maxLength: 512
          minLength: 1
          required:
            - id
        values:
          type: array
          example:
            - 0.1
            - 0.2
            - 0.3
            - 0.4
            - 0.5
            - 0.6
            - 0.7
            - 0.8
          items:
            type: number
            format: float
          description: Vector data.
          maxLength: 20000
          minLength: 1
        sparseValues:
          $ref: '#/components/schemas/SparseValues'
        setMetadata:
          type: object
          example:
            genre: documentary
            year: 2019
          description: Metadata to *set* for the vector.
        namespace:
          type: string
          example: example-namespace
          description: The <a href='https://docs.pinecone.io/docs/namespaces'>namespace</a> containing the vector to update.
      description: The request for the `Upsert` operation.
      required:
        - id
    UpdateResponse:
      type: object
      description: The response for the `Update` operation.
    UpsertRequest:
      type: object
      properties:
        vectors:
          type: array
          items:
            $ref: '#/components/schemas/Vector'
          description: An array containing the vectors to upsert. Recommended batch limit is 100 vectors.
          maxLength: 1000
          minLength: 1
          required:
            - vectors
        namespace:
          type: string
          example: example-namespace
          description: This is the <a href='https://docs.pinecone.io/docs/namespaces'>namespace</a> name where you upsert vectors. Not supported by projects on the gcp-starter environment.
      description: The request for the `Upsert` operation.
      required:
        - vectors
    UpsertResponse:
      type: object
      properties:
        upsertedCount:
          type: integer
          format: int64
          example: 10
          description: The number of vectors upserted.
      description: The response for the `Upsert` operation.
    Vector:
      type: object
      properties:
        id:
          type: string
          example: example-vector-1
          description: This is the vector's unique id.
          maxLength: 512
          minLength: 1
          required:
            - id
        values:
          type: array
          example:
            - 0.1
            - 0.2
            - 0.3
            - 0.4
            - 0.5
            - 0.6
            - 0.7
            - 0.8
          items:
            type: number
            format: float
          description: This is the vector data included in the request.
          maxLength: 20000
          minLength: 1
          required:
            - values
        sparseValues:
          $ref: '#/components/schemas/SparseValues'
        metadata:
          type: object
          example:
            genre: documentary
            year: 2019
          description: This is the metadata included in the request.
      required:
        - id
        - values
    protobufAny:
      type: object
      properties:
        typeUrl:
          type: string
        value:
          type: string
          format: byte
    protobufNullValue:
      type: string
      enum:
        - NULL_VALUE
      default: NULL_VALUE
      description: |-
        `NullValue` is a singleton enumeration to represent the null value for the
        `Value` type union.

         The JSON representation for `NullValue` is JSON `null`.

         - NULL_VALUE: Null value.
    rpcStatus:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        details:
          type: array
          items:
            $ref: '#/components/schemas/protobufAny'
    createRequest:
      type: object
      required:
        - name
        - dimension
      properties:
        name:
          type: string
          description: The name of the index to be created. The maximum length is 45 characters.
          example: example-index
        dimension:
          type: integer
          description: The dimensions of the vectors to be inserted in the index
          example: 1024
        index_type:
          type: string
          description: The type of vector index. Pinecone supports 'approximated'.
          default: approximated
          deprecated: true
        metric:
          type: string
          description: The distance metric to be used for similarity search. You can use 'euclidean', 'cosine', or 'dotproduct'.
          default: cosine
        pods:
          type: integer
          description: The number of pods for the index to use,including replicas.
          default: 1
        replicas:
          type: integer
          description: The number of replicas. Replicas duplicate your index. They provide higher availability and throughput.
          default: 1
        pod_type:
          type: string
          description: The type of pod to use. One of `s1`, `p1`, or `p2` appended with `.` and one of `x1`, `x2`, `x4`, or `x8`.
          default: p1.x1
        index_config:
          oneOf:
            - $ref: '#/components/schemas/ApproximatedConfig'
          deprecated: true
        metadata_config:
          type: object
          description: |-
            Configuration for the behavior of Pinecone's internal metadata index. By default, all metadata is indexed; when `metadata_config` is present, only specified metadata fields are indexed. To specify metadata fields to index, provide a JSON object of the following form: 
              ``` 
             {"indexed": ["example_metadata_field"]} 
             ``` 
          nullable: true
        source_collection:
          type: string
          description: The name of the collection to create an index from
    createCollectionRequest:
      type: object
      required:
        - name
        - source
      properties:
        name:
          type: string
          description: The name of the collection to be created.
          example: example-collection
        source:
          type: string
          description: The name of the source index to be used as the source for the collection.
          example: example-source-index
    collectionMeta:
      type: object
      properties:
        name:
          type: string
          example: example-collection
        size:
          type: integer
          description: The size of the collection in bytes.
          example: 1
        status:
          type: string
          description: The status of the collection.
          example: created
    indexMeta:
      type: object
      properties:
        database:
          type: object
          properties:
            name:
              type: string
            dimension:
              type: string
            index_type:
              type: string
              deprecated: true
            metric:
              type: string
            pods:
              type: integer
            replicas:
              type: integer
            shards:
              type: integer
              deprecated: true
            pod_type:
              type: string
            index_config:
              oneOf:
                - $ref: '#/components/schemas/ApproximatedConfig'
              deprecated: true
            metadata_config:
              type: object
        status:
          type: object
          properties:
            ready:
              type: boolean
            state:
              type: string
              enum:
                - Initializing
                - ScalingUp
                - ScalingDown
                - ScalingUpPodSize
                - ScalingDownPodSize
                - Terminating
                - Ready
                - InitializationFailed
            host:
              type: string
            port:
              type: integer
    patchRequest:
      type: object
      properties:
        replicas:
          type: integer
          description: The desired number of replicas for the index.
          example: 3
        pod_type:
          type: string
          description: The new pod type for the index. One of `s1`, `p1`, or `p2` appended with `.` and one of `x1`, `x2`, `x4`, or `x8`.
          example: s1.x2
    HnswConfig:
      type: object
      properties:
        ef_construction:
          type: integer
          default: 500
        ef:
          type: integer
          default: 250
        M:
          type: integer
          default: 12
        max_elements:
          type: integer
          default: 50000000
    ApproximatedConfig:
      type: object
      properties:
        k_bits:
          type: integer
          default: 512
        hybrid:
          type: boolean
          default: false
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      description: An API Key is required to call Pinecone APIs. Get yours at https://www.pinecone.io/start/
      name: Api-Key
      in: header
